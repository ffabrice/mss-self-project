# create and deploy VPN connection

#Read vpc resource 
data "aws_vpc" "awsvpc-mssssell-tf" {
  filter {
    name   = "tag:Name"
    values = ["${var.aws_pod}-${var.aws_vpc_sufx}"]
  }
}

#Read route table  
data "aws_route_table" "awsrt-mssssell-tf" {
  filter {
    name   = "tag:Name"
    values = ["${var.aws_pod}-${var.aws_public_routetable_sufx}"]
  }
}

# Create a VPN gateway
resource "aws_vpn_gateway" "aws-vpngw-tf-sell" {
  vpc_id = data.aws_vpc.awsvpc-mssssell-tf.id

  tags = {
    Name = "${var.aws_pod}-${var.aws_vpngw_sufx}"
  }
}

# Create a customer gateway
resource "aws_customer_gateway" "aws-customergw-tf-sell" {
  bgp_asn    = var.aws_customer_gateway_asn
  ip_address = var.aws_customer_gateway_ip
  type       = var.aws_customer_gateway_type

  tags = {
    Name = "${var.aws_pod}-${var.aws_customergw_sufx}"
  }
}

# Create a VPN connection
resource "aws_vpn_connection" "aws-vpnco-tf-sell" {
  vpn_gateway_id      = resource.aws_vpn_gateway.aws-vpngw-tf-sell.id
  customer_gateway_id = resource.aws_customer_gateway.aws-customergw-tf-sell.id
  type                = var.aws_vpn_connection_type
  static_routes_only  = true

  tags = {
    Name = "${var.aws_pod}-${var.aws_vpn_connection_sufx}"
  }

}

# Create a VPN connection route
resource "aws_vpn_connection_route" "aws-vpnco-route-tf-sell" {
  destination_cidr_block = var.aws_vpn_connection_destination
  vpn_connection_id      = aws_vpn_connection.aws-vpnco-tf-sell.id
}

# Create a VPN route propagation
resource "aws_vpn_gateway_route_propagation" "aws-vpngw-routepropa-tf-sell" {
  vpn_gateway_id = aws_vpn_gateway.aws-vpngw-tf-sell.id
  route_table_id = data.aws_route_table.awsrt-mssssell-tf.id
}

# Create public route table ???
resource "aws_route_table" "aws-public-routetable-tovgw-tf-sell" {
  vpc_id     = data.aws_vpc.awsvpc-mssssell-tf.id
  
  route {
    cidr_block = var.aws_vpn_connection_destination
    gateway_id = aws_vpn_gateway.aws-vpngw-tf-sell.id
  }

  tags = {
    Name = "${var.aws_pod}-${var.aws_public_routetabletovgw_sufx}"
  }
}

# Create a local file to pass data to ansible
resource "local_file" "ansible_vars_tf-sell" {
  content = <<-DOC
    # Ansible vars_file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    strongswan_base: /etc
    ipsec_service: strongswan
    vpc_cidr: ${data.aws_vpc.awsvpc-mssssell-tf.cidr_block}
    local_cidr: ${var.aws_vpn_connection_destination}
    tunnel1_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel1_address}
    tunnel1_cgw_inside_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel1_cgw_inside_address}/30
    tunnel1_vgw_inside_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel1_vgw_inside_address}/30
    tunnel1_preshared_key: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel1_preshared_key}
    tunnel2_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel2_address}
    tunnel2_cgw_inside_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel2_cgw_inside_address}/30
    tunnel2_vgw_inside_address: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel2_vgw_inside_address}/30
    tunnel2_preshared_key: ${aws_vpn_connection.aws-vpnco-tf-sell.tunnel2_preshared_key}
    ovh_loopback_ip: ${var.ovh_loopback_ip}
    DOC
  filename = var.ansible_strongswan_vars_file
}
